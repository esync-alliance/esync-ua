
# Set GHS tool paths
if("${GHS_OS_DIR}" STREQUAL "")
  message(FATAL_ERROR "The GHS_OS_DIR is not found, please set GHS_OS in the config.cmk.default first!")
endif()
if("${GHS_BSP_NAME}" STREQUAL "")
  message(FATAL_ERROR "The GHS_BSP_NAME is not found, please set the GHS_BSP_NAME in the config.cmk.default first")
endif()
if("${BUILD_TOOL_DIR}" STREQUAL "")
  message(FATAL_ERROR "The BUILD_TOOL is not found, please set the BUILD_TOOL in the config.cmk.default  first!")
endif()
set(BUILD_TOOL ${BUILD_TOOL_DIR}/gbuild)
if("${GHS_TGT_DIR}" STREQUAL "")
  message(FATAL_ERROR "Not found TGT dir, you must set the GHS_TGT_DIR path first")
endif()

# Load paths of dependent libraries
if("${LIB_XL4BUS_DIR}" STREQUAL "")
  set(LIB_XL4BUS_DIR "${CMAKE_SOURCE_DIR}/../libxl4bus")
  if (NOT EXISTS ${LIB_XL4BUS_DIR})
    message(FATAL_ERROR "You must clone libxl4bus first")
  endif()
endif()

if("${LIB_XL4BUS_BUILD_DIR}" STREQUAL "")
  set(LIB_XL4BUS_BUILD_DIR "${LIB_XL4BUS_DIR}/build")
  if (NOT EXISTS ${LIB_XL4BUS_BUILD_DIR})
    message(FATAL_ERROR "You must create build dir in libxl4bus and build xl4bus first")
  endif()
endif()

set(LIB_UA_DIR "${CMAKE_SOURCE_DIR}")

if("${LIB_UA_BUILD_DIR}" STREQUAL "")
    set(LIB_UA_BUILD_DIR "${LIB_UA_DIR}/build")
    if (NOT EXISTS ${LIB_UA_BUILD_DIR})
        message(FATAL_ERROR "You must set the LIB_UA_BUILD_DIR")
    endif()
endif()

if ("${LIB_JSONC_DIR}" STREQUAL "")
  set(LIB_JSONC_DIR "${LIB_XL4BUS_DIR}/json-c")
  if (NOT EXISTS ${LIB_JSONC_DIR})
    message(FATAL_ERROR "json-c does not exist, clone json-c first")
  endif()
endif()
if ("${LIB_JANSSON_DIR}" STREQUAL "")
  set(LIB_JANSSON_DIR "${LIB_XL4BUS_DIR}/jansson")
  if (NOT EXISTS ${LIB_JANSSON_DIR})
    message(FATAL_ERROR "jansson does not exist, clone jansson first")
  endif()
endif()
if ("${LIB_CARES_DIR}" STREQUAL "")
  set(LIB_CARES_DIR "${LIB_XL4BUS_DIR}/c-ares")
  if (NOT EXISTS ${LIB_CARES_DIR})
    message(FATAL_ERROR "c-ares does not exist, clone c-ares first")
  endif()
endif()
if ("${LIB_CJOSE_DIR}" STREQUAL "")
  set(LIB_CJOSE_DIR "${LIB_XL4BUS_DIR}/cjose")
  if (NOT EXISTS ${LIB_CJOSE_DIR})
    message(FATAL_ERROR "cjose does not exist, clone cjose first")
  endif()
endif()
if ("${LIB_OPENSSL_DIR}" STREQUAL "")
  set(LIB_OPENSSL_DIR "${LIB_XL4BUS_DIR}/ghs_port/openssl/openssl")
  if (NOT EXISTS ${LIB_OPENSSL_DIR})
    message(FATAL_ERROR "openssl does not exist, clone openssl first")
  endif()
endif()
if ("${LIB_MBEDTLS_DIR}" STREQUAL "")
  set(LIB_MBEDTLS_DIR "${LIB_XL4BUS_DIR}/mbedtls")
  if (NOT EXISTS ${LIB_MBEDTLS_DIR})
    message(FATAL_ERROR "mbedtls does not exist, clone mbedtls first")
  endif()
endif()
if ("${LIB_GHS_MISC_DIR}" STREQUAL "")
  set(LIB_GHS_MISC_DIR "${LIB_XL4BUS_DIR}/ghs_port/ghs_misc")
  if (NOT EXISTS ${LIB_GHS_MISC_DIR})
    message(FATAL_ERROR "ghs_misc does not exist, clone ghs_misc first")
  endif()
endif()
if ("${LIB_XML2_DIR}" STREQUAL "")
  set(LIB_XML2_DIR "${CMAKE_SOURCE_DIR}/libxml2")
  if (NOT EXISTS ${LIB_XML2_DIR})
    message(FATAL_ERROR "libxml2  does not exist, clone libxml2 first")
  endif()
endif()
if ("${LIB_ZLIB_DIR}" STREQUAL "")
  set(LIB_ZLIB_DIR "${CMAKE_SOURCE_DIR}/zlib")
  if (NOT EXISTS ${LIB_ZLIB_DIR})
    message(FATAL_ERROR "zlib does not exist, clone zlib first")
  endif()
endif()

if ("${LIB_ZIP_DIR}" STREQUAL "")
  set(LIB_ZIP_DIR "${CMAKE_SOURCE_DIR}/libzip")
  if (NOT EXISTS ${LIB_ZIP_DIR})
    message(FATAL_ERROR "libzip does not exist, clone libzip first")
  endif()
endif()

if ("${LIB_ESDELTADEC_DIR}" STREQUAL "")
  set(LIB_ESDELTADEC_DIR "${CMAKE_SOURCE_DIR}/esdiff")
  if (NOT EXISTS ${LIB_ESDELTADEC_DIR})
    message(FATAL_ERROR "libesdeltadec does not exist, clone esdiff first")
  endif()
endif()
if ("${LIB_XZ_DIR}" STREQUAL "")
  set(LIB_XZ_DIR "${CMAKE_SOURCE_DIR}/xz")
  if (NOT EXISTS ${LIB_XZ_DIR})
    message(FATAL_ERROR "libxz does not exist, clone libxz first")
  endif()
endif()

if(("${LIB_MBEDTLS_BUILD_DIR}" STREQUAL "") OR (NOT IS_DIRECTORY ${LIB_MBEDTLS_BUILD_DIR}))
  set(LIB_MBEDTLS_BUILD_DIR "${LIB_XL4BUS_DIR}/ghs_port/mbedtls/build")
  if (NOT IS_DIRECTORY ${LIB_MBEDTLS_BUILD_DIR})
    message(FATAL_ERROR "Yout must build mbedtls first")
  endif()
endif()

if(("${LIB_CARES_BUILD_DIR}" STREQUAL "") OR (NOT IS_DIRECTORY ${LIB_CARES_BUILD_DIR}))
  set(LIB_CARES_BUILD_DIR "${LIB_XL4BUS_DIR}/ghs_port/c-ares/build")
  if (NOT IS_DIRECTORY ${LIB_CARES_BUILD_DIR})
    message(FATAL_ERROR "You must build c-ares first")
  endif()
endif()

if(("${LIB_JSONC_BUILD_DIR}" STREQUAL "") OR (NOT IS_DIRECTORY ${LIB_JSONC_BUILD_DIR}))
  set(LIB_JSONC_BUILD_DIR "${LIB_XL4BUS_DIR}/ghs_port/json-c/build")
  if (NOT IS_DIRECTORY ${LIB_JSONC_BUILD_DIR})
    message(FATAL_ERROR "You must build json-c first")
  endif()
endif()

if(("${LIB_CJOSE_BUILD_DIR}" STREQUAL "") OR (NOT IS_DIRECTORY ${LIB_CJOSE_BUILD_DIR}))
  set(LIB_CJOSE_BUILD_DIR "${LIB_XL4BUS_DIR}/ghs_port/cjose/build")
  if (NOT IS_DIRECTORY ${LIB_CJOSE_BUILD_DIR})
    message(FATAL_ERROR "You must build cjose first")
  endif()
endif()

if(("${LIB_OPENSSL_BUILD_DIR}" STREQUAL "") OR (NOT IS_DIRECTORY ${LIB_OPENSSL_BUILD_DIR}))
  set(LIB_OPENSSL_BUILD_DIR "${LIB_XL4BUS_DIR}/ghs_port/openssl/build")
  if (NOT IS_DIRECTORY ${LIB_OPENSSL_BUILD_DIR})
    message(FATAL_ERROR "You must build openssl first")
  endif()
endif()

if(("${LIB_JANSSON_BUILD_DIR}" STREQUAL "") OR (NOT IS_DIRECTORY ${LIB_JANSSON_BUILD_DIR}))
  set(LIB_JANSSON_BUILD_DIR "${LIB_XL4BUS_DIR}/ghs_port/jansson/build")
  if (NOT IS_DIRECTORY ${LIB_JANSSON_BUILD_DIR})
    message(FATAL_ERROR "You must build jansson first")
  endif()
endif()
if(("${LIB_XML2_BUILD_DIR}" STREQUAL "") OR (NOT IS_DIRECTORY ${LIB_XML2_BUILD_DIR}))
  set(LIB_XML2_BUILD_DIR "${CMAKE_SOURCE_DIR}/ghs_port/libxml2/build")
  if (NOT IS_DIRECTORY ${LIB_XML2_BUILD_DIR})
    message(FATAL_ERROR "You must build libxml2 first")
  endif()
endif()
if(("${LIB_ZLIB_BUILD_DIR}" STREQUAL "") OR (NOT IS_DIRECTORY ${LIB_ZLIP_BUILD_DIR}))
  set(LIB_ZLIB_BUILD_DIR "${CMAKE_SOURCE_DIR}/ghs_port/zlib/build")
  if (NOT IS_DIRECTORY ${LIB_ZLIB_BUILD_DIR})
    message(FATAL_ERROR "You must build zlib first")
  endif()
endif()
if(("${LIB_ZIP_BUILD_DIR}" STREQUAL "") OR (NOT IS_DIRECTORY ${LIB_ZIP_BUILD_DIR}))
  set(LIB_ZIP_BUILD_DIR "${CMAKE_SOURCE_DIR}/ghs_port/libzip/build")
  if (NOT IS_DIRECTORY ${LIB_ZIP_BUILD_DIR})
    message(FATAL_ERROR "You must build zip first")
  endif()
endif()
if(("${LIB_GHS_MISC_BUILD_DIR}" STREQUAL "") OR (NOT IS_DIRECTORY ${LIB_GHS_MISC_BUILD_DIR}))
  set(LIB_GHS_MISC_BUILD_DIR "${LIB_XL4BUS_DIR}/ghs_port/ghs_misc/build")
  if (NOT IS_DIRECTORY ${LIB_GHS_MISC_BUILD_DIR})
    message(FATAL_ERROR "You must build ghs_misc first")
  endif()
endif()

if("${LIB_ESDELTADEC_BUILD_DIR}" STREQUAL "")
  set(LIB_ESDELTADEC_BUILD_DIR "${CMAKE_SOURCE_DIR}/ghs_port/esdiff/build")
  if (NOT IS_DIRECTORY ${LIB_ESDELTADEC_BUILD_DIR})
    message(FATAL_ERROR "You must build esdeltadec first")
  endif()
endif()

if("${LIB_XZ_BUILD_DIR}" STREQUAL "")
  set(LIB_XZ_BUILD_DIR "${CMAKE_SOURCE_DIR}/ghs_port/xz/build")
  if (NOT IS_DIRECTORY ${LIB_XZ_BUILD_DIR})
    message(FATAL_ERROR "You must build xz first")
  endif()
endif()

set(UA_SRC_DIR ${CMAKE_SOURCE_DIR}/../../src/test_agents)

#Generate INTEGRITY project files
macro(configure_files srcDir dstDir)
  message(STATUS "Generating the gpj file FROM ${srcDir} TO  directory ${dstDir}")
  file(GLOB cfgFiles RELATIVE ${srcDir} ${srcDir}/*.in)

  foreach(cfgFile in ${cfgFiles})
    set(filePath ${srcDir}/${cfgFile})
    if(EXISTS ${filePath})
      # Remove the extension .in from input file for output file
      string(REGEX REPLACE ".in$" "" dstFile ${cfgFile})
      configure_file(${filePath} ${dstDir}/${dstFile} @ONLY)
    endif()
  endforeach()
endmacro(configure_files)

configure_files(${CMAKE_SOURCE_DIR}/ghs_port ${CMAKE_BINARY_DIR})
