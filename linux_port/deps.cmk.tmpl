include(FindPkgConfig)

# Checking openssl
include(FindOpenSSL)

# Checking libxml2
include(FindLibXml2)
include_directories(SYSTEM ${LIBXML2_INCLUDE_DIR})

# Checking libzip
include(FindLibZip.cmake)

# Checking json-c
if(NOT JSON_C)
    set(JSON_C ${CMAKE_SOURCE_DIR}/json-c-build)
endif()

get_filename_component(JSON_C_LIB ${JSON_C}/.libs/libjson-c.a REALPATH)
if (NOT EXISTS ${JSON_C_LIB})
    message(FATAL_ERROR "You must build json-c sources first!")
endif()

if(XL4BUS_DIR)
# Checking libxl4bus
    get_filename_component(XL4BUS_LIB ${XL4BUS_DIR}/libxl4bus.so REALPATH)
    if (NOT EXISTS ${XL4BUS_LIB})
        message(FATAL_ERROR "You must build libxl4bus sources first!")
    endif()
include_directories(SYSTEM ${XL4BUS_DIR}/../src/include)
include_directories(SYSTEM ${XL4BUS_DIR}/include)
else()
set(XL4BUS_LIB -lxl4bus)
endif()

# Checking dmclient
if (SUPPORT_UA_DOWNLOAD)
    include_directories(SYSTEM ${DMCLIENT_DIR}/include)
    get_filename_component(DMCLIENT_LIB ${DMCLIENT_DIR}/build/libdmclient.so REALPATH)
    if (NOT EXISTS ${DMCLIENT_LIB})
        message(WARNING "Not found libdmclient.so in build folder , You should build libdmclient sources first!")
        set(DMCLIENT_LIB -ldmclient)
    endif()
set(CURL_LIB -lcurl)
endif()

if (SHELL_COMMAND_DISABLE)
include(FindXZ.cmake)
include_directories(SYSTEM ${XZ_INCLUDE_DIR})
if (NOT ESDIFF)
   set(ESDIFF ${CMAKE_SOURCE_DIR}/esdiff-build)
endif()
if (NOT NOCHECK_ESDELTADEC)
get_filename_component(ESDIFF_LIB ${ESDIFF}/.libs/libesdeltadec.so REALPATH)
if (NOT EXISTS ${ESDIFF_LIB})
    message(FATAL_ERROR "Not found libesdeltadec.so in build folder, you should build libesdeltadec.so first!")
endif()
endif()
set(ESDIFF_LIB -lesdeltadec)
set(LZMA_LIB -llzma)
include_directories(SYSTEM ${ESDIFF})
include_directories(SYSTEM ${CMAKE_SOURCE_DIR}/src/delta_utils)
endif()

# Set include path
include_directories(SYSTEM ${JSON_C})
include_directories(SYSTEM ${CMAKE_SOURCE_DIR}/src/include)
include_directories(${CMAKE_SOURCE_DIR}/src)
include_directories(${CMAKE_BINARY_DIR})

# Set linker flags
set(COMMON_DEPS ${XL4BUS_LIB} ${DMCLIENT_LIB} ${CURL_LIB} -Wl,-Bdynamic ${LIBZIP_LIBRARY} -lxml2 -lssl -lcrypto -lm -lz)
if (SHELL_COMMAND_DISABLE)
set(COMMON_DEPS ${COMMON_DEPS} ${ESDIFF_LIB} ${LZMA_LIB})
endif()

set(SHARED_DEPS ${JSON_C_LIB} ${COMMON_DEPS})
set(APP_DEPS ${JSON_C_LIB} ${COMMON_DEPS})
